<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="KillBatchCommand" xml:space="preserve">
    <value>@echo off
if %1.==. GOTO ErrHandler
taskkill -f -im %1.exe &gt; null
GOTO :End
:ErrHandler
echo Invalid or missing parameter.
:End
exit /b</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="nvidiaInspector" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\nvidiaInspector.exe;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="nvidiaProfileInspector" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\nvidiaProfileInspector.exe;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="Pysrc" xml:space="preserve">
    <value>#header "please do a 'pip install psutil' as it should solve most problem"
try:
	import os.path,os,sys,time
	import psutil
	import thread
	from gtts import gTTS #google text-to-speech api
	import playsound #mp3 player
except:
	os.system("color 04") #RED
	for i in range(5):
		print("Some modules are missing. Please restart inspecthelper after the modules installation")
		time.sleep(0.5)
	os.system("color 07") #DEFAULT 
	os.system("C:\Python27\Scripts\pip.exe install psutil")
	os.system("C:\Python27\Scripts\pip.exe install gtts")
	os.system("C:\Python27\Scripts\pip.exe install playsound")
	os.system("taskkill -f -im inspecthelperGUI.exe");
	


#constant
idle = 64
belownormal=16384
normal=32
abovenormal=32768
high=128
realtime=256
currPath = os.getcwd()
##EXPERIMENT##
_currPath = os.path.realpath(__file__)
##EXPERIMENT##
delay = 10 #measure in second, not recommend to do very frequence as it gonna make your cpu work so hard
High_Performance = "8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c"
Balanced = "381b4222-f694-41f0-9685-ff5bb260df2e"
counter = 0



#flag variable
history = "null"
mp3filelist = []

#function
def getFileName(name):
	return _currPath.replace("inspecthelper.py",name)

def variableName(var,namespace):
	return [name for name in namespace if namespace[name] is var]

def isExist(filename):
	return os.path.isfile(filename)

def fileLoader(path):
	rList = {}
	with open(path,"r") as f:
		for line in f:
			if "#" not in line:
				splitLine = line.split(",")
				splitLine[1] = splitLine[1].replace("\n","")
				rList[str(splitLine[0])] = splitLine[1]
	return rList

def switchState(modestr):
	#os.system("powercfg /setactive %s"%mode)
	global history,counter
	modestrspf = modestr[1]
	modestrspf = modestrspf[:len(modestrspf)-4]
	if(history!=modestrspf):
		history=modestrspf
		tempfname = modestr[0]+".mp3"
		if isExist(getFileName(tempfname))==False:
			tts = gTTS(text="Currently on {0}".format(modestr[0]),lang='en')	
			tts.save(getFileName(tempfname))
		thread.start_new_thread(playsound.playsound,(getFileName(tempfname),)) #play sound in threading manner
		os.system('powercfg /setactive {0}'.format(High_Performance if modestrspf!="Default" else Balanced)) #High Performance Power Plan
		os.system('wmic process where name="{0}.exe" CALL setpriority {1} &gt; null'.format(history,high)) #high priority for the process
		os.system('"{0}.bat"'.format(modestr[0])) #custom bat file for nvidiainspector config
		mp3filelist.append(tempfname)
	os.system("cls")
	return "\rCurrently on {0}".format(modestr[0])

def Core(state):
	SettingProc = fileLoader(getFileName("inspecthelper.settings"))
	while(state):
		procsList = []
		sender = ("Desktop","Default.exe")	
		for proc in psutil.process_iter():
			pvalue = "".join(proc.as_dict(attrs=['name']).values())
			procsList.append(pvalue)
		#for p in procsList:
			#for ps in SettingProc.items():
		for ps in SettingProc.items(): #this should help improve overall performance
			for p in procsList:
				if p == ps[1]: #the value of dict
					sender = ps #now the ps is not come as dict, it's a tuple
					break
			else:
				continue
			break
		print switchState(sender),
		time.sleep(delay)

#main flow
os.system("cls")
os.system("title Nvidia Inspector Profile Helper (x86) [Press Ctrl+C for option]")
try:
	#if isExist(currPath+"\%s"%filename):
	if isExist(getFileName("inspecthelper.settings")):
		os.system('wmic process where name="python.exe" CALL setpriority {0} &gt; null'.format(belownormal))
		#os.system('start {0}\ideafan\ideafan.exe'.format(_currPath.replace("\inspecthelper.py","")))
		Core(True)
	else:
		answer = raw_input("Setting file is not exist, would you like to create now? (Y/N) : ")
		if answer == "Y":
			file = open(filename,'w')
			file.write("### ONLY PROCESSES NAME ARE GIVEN BELOW THIS LINE IN FORM OF NAME,PROCESS NAME.EXE , ANY LINE WITH SHARP(#) WOULD BE IGNORED ###\nDummy,Dummy.exe\n")
			file.close()
			os.system("notepad %s"%filename)
		else:
			exit()
except KeyboardInterrupt:
	answer = str(raw_input("\nWhat do you want to do :\n1.) Open setting\n2.) Exit\nGoing for : "),)
	if answer == "1":
		os.system("notepad %s"%filename)
	else:
		switchState(("Default","Default.exe"))
		print("\nPROCESS SCANNER TERMINATED")
		sys.exit(0)
except Exception as e:
	print(e.message)</value>
  </data>
  <data name="SettngsFilePath" xml:space="preserve">
    <value>C:\Windows\_CustomCommand\inspecthelper.settings</value>
  </data>
</root>